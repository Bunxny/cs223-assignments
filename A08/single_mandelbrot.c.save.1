#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>
#include "read_ppm.h"
#include "write_ppm.h"

void mandelbrot(int image_size, double xmin, double xmax, double ymin, double ymax, int MAX, int palette[], int* image);

int main(int argc, char* argv[]) {
  int size = 480;
  float xmin = -2.0;
  float xmax = 0.47;
  float ymin = -1.12;
  float ymax = 1.12;
  int maxIterations = 1000;

  int opt;
  while ((opt = getopt(argc, argv, ":s:l:r:t:b:")) != -1) {
    switch (opt) {
      case 's': size = atoi(optarg); break;
      case 'l': xmin = atof(optarg); break;
      case 'r': xmax = atof(optarg); break;
      case 't': ymax = atof(optarg); break;
      case 'b': ymin = atof(optarg); break;
      case '?': printf("usage: %s -s <size> -l <xmin> -r <xmax> -b <ymin> -t <ymax>\n", argv[0]); break;
    }
  }
  printf("Generating mandelbrot with size %dx%d\n", size, size);
  printf("  X range = [%.4f,%.4f]\n", xmin, xmax);
  printf("  Y range = [%.4f,%.4f]\n", ymin, ymax);

  // todo: your work here
  // generate pallet
  srand(time(0));
  
  // compute image

}

void mandelbrot(int image_size, double xmin, double xmax, double ymin, double ymax, int MAX, int palette[], int* image) {
  int row, col, iter;
  double xfrac, yfrac, x0, y0, x, y, xtmp;
  int color;
  for (row = 0; row < image_size; row++) {
    for (col = 0; col < image_size; col++) {
      xfrac = (double) row / (double) image_size;
      yfrac = (double) col / (double) image_size;
      x0 = xmin + xfrac * (xmax - xmin);
      y0 = ymin + yfrac * (ymax - ymin);
      x = 0;
      y = 0;
      iter = 0;
      while (iter < MAX && x*x + y*y < 2*2) {
        xtmp = x*x - y*y + x0;
        y = 2*x*y + y0;
        x = xtmp;
        iter++;
      }
      if (iter < MAX) { // escaped
      color = palette[iter];
      } else {
      color = 0; // black
      }
      // write color to image at location (row,col)
      image[row*image_size+col] = color;
    }
  }
}
